#include<bits/stdc++.h>
using namespace std;

class forwardInterpolation {
private:
    vector<double> x, y;
    vector<vector<double>> diffTable;

    // Function to compute factorials (this can be optimized)
    int factorial(int n) {
        int ans = 1;
        for(int i = 1; i <= n; i++) {
            ans *= i;
        }
        return ans;
    }

    // Function to build the forward difference table
    void buildDiffTable() {
        int n = x.size();
        diffTable.resize(n, vector<double>(n, 0.0));

        // First column of the difference table is the y values
        for (int i = 0; i < n; i++) {
            diffTable[i][0] = y[i];
        }

        // Fill the forward difference table
        for (int j = 1; j < n; j++) {
            for (int i = 0; i < n - j; i++) {
                diffTable[i][j] = diffTable[i + 1][j - 1] - diffTable[i][j - 1];
            }
        }
    }

public:
    forwardInterpolation(vector<double> &xx, vector<double> &yy) {
        x = xx;
        y = yy;
        buildDiffTable();
    }

    // Function to display the difference table (for debugging/verification)
    void displayDiffTable() {
        cout << "Forward Difference Table:" << endl;
        int n = x.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                cout << fixed << setprecision(2) << diffTable[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Function to perform interpolation
    double interpolate(double value) {
        int n = x.size();
        double h = x[1] - x[0];  // Step size
        double p = (value - x[0]) / h;  // p = (value - x_0) / h
        double res = y[0];  // Start with the first value of y
        double term = 1;

        // Apply Newton's Forward Interpolation formula
        for (int i = 1; i < n; i++) {
            term *= (p - (i - 1));  // Increment the term for each iteration
            res += (term * diffTable[0][i]) / factorial(i);  // Add the result of each term
        }

        return res;
    }
};

int main() {
    // Given data points
    vector<double> x = {1, 3, 5, 7};
    vector<double> y = {24, 120, 336, 720};

    // Create the forwardInterpolation object
    forwardInterpolation f(x, y);

    // Display the forward difference table (optional)
    f.displayDiffTable();

    // Interpolate the value at x = 4
    double value = 4;
    double result = f.interpolate(value);

    // Output the interpolated result
    cout << "Interpolated value at x = " << value << " is: " << fixed << setprecision(4) << result << endl;

    return 0;
}
