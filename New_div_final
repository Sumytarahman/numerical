#include<bits/stdc++.h>
using namespace std;

class NewtonDiv {
private:
    double a[100], b[100];
    double total[100][100];
    int n;

public:
    // Function to take input from the user
    void take_input() {
        cout << "Enter the total number of data points: ";
        cin >> n;
        cout << "Enter the values of x and y:" << endl;
        for (int i = 0; i < n; i++) {
            cin >> a[i];
            cin >> b[i];
        }
    }

    // Function to construct the Divided Difference Table
    void div_table() {
        // Initializing the first column of the divided difference table with the 'b' values (y-values)
        for (int i = 0; i < n; i++) {
            total[i][0] = b[i];
        }

        // Constructing the rest of the divided difference table
        for (int j = 1; j < n; j++) {
            for (int i = 0; i < n - j; i++) {
                total[i][j] = (total[i + 1][j - 1] - total[i][j - 1]) / (a[i + j] - a[i]);
            }
        }

        // Printing the Divided Difference Table
        cout << "\nDivided Difference Table:\n";
        cout << setw(15) << "x-values";
        for (int i = 0; i < n; i++) {
            cout << setw(15) << "f[" << i << "]";
        }
        cout << endl;

        for (int i = 0; i < n; i++) {
            cout << setw(10) << a[i] << " ";
            for (int j = 0; j < n - i; j++) {
                cout << setw(15) << fixed << setprecision(6) << total[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Function to calculate the interpolated value at a given 'xp' using Newton's method
    void NewRoot(double xp) {
        double ans = total[0][0];
        double p = 1;

        // Applying the Newton's interpolation formula
        for (int i = 1; i < n; i++) {
            p *= (xp - a[i - 1]);
            ans += p * total[0][i];
        }

        cout << "The interpolated value at x = " << xp << " is: " << ans << endl;
    }
};

int main() {
    NewtonDiv newtonDiv;

    // Take input for x and y values
    newtonDiv.take_input();

    // Construct the divided difference table
    newtonDiv.div_table();

    // Prompt the user to enter the value of 'x' for interpolation
    cout << "Enter the value of x for interpolation: ";
    double value;
    cin >> value;

    // Calculate and display the interpolated result at the given 'x'
    newtonDiv.NewRoot(value);

    return 0;
}
